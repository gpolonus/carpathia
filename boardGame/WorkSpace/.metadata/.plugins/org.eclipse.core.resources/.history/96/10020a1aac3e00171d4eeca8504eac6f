package game;

import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import game.board.Board;
import game.config.GameConfig;
import game.end.WinTest;
import game.event.GameEventList;
import game.event.end.WinningSend;
import game.event.startup.StartAlert;
import game.player.Player;
import game.player.list.PlayerIterator;
import game.space.Space;
import util.ColorUtil;

public abstract class Game
{
	public static List<Player> players = new LinkedList<Player>();
	public static Player activePlayer;

	public static boolean started = false;
	
//	event lists:
	protected static GameEventList preTurnEventList = new GameEventList();
	protected static GameEventList turnEventList = new GameEventList();
	protected static GameEventList postTurnEventList = new GameEventList();
	
//	for moving from one eventlist to the next
	protected static GameEventList activeEventList;
	protected static List<GameEventList> eventLists = new LinkedList<GameEventList>();
	protected static Iterator<GameEventList> eventListsIterator;
	
	protected static WinTest winTest;
	
	protected static PlayerIterator pi;

	static{
		
//		adding eventLists
		eventLists.add(preTurnEventList);
		activeEventList = preTurnEventList;
		eventLists.add(turnEventList);
		eventLists.add(postTurnEventList);
		
//		get iterator for the first time
		eventListsIterator = eventLists.iterator();
	}
	
	// needed for the eventual game start timer
//	public static boolean readying = false;
	
	public static String sendString;
	
	public static Board board;
	
	protected GameConfig gameConfig;
	
	public Game(GameConfig gameConfig)
	{
		sendString = "";
		this.gameConfig = gameConfig;
		board = gameConfig.makeNewBoard();
		pi = gameConfig.makePlayerIterator();
		winTest = gameConfig.makeWinTest();
//		((StartAlert)GameEventList.getEvent("startAlert")).setGame(this);
	}

	public static void determinePlayerRandomColors()
	{
		double startAngle = Math.random() * Math.PI * 2;
		for(int i = 0; i < players.size(); i++)
		{
			players.get(i).color = new ColorUtil((double)(startAngle + Math.PI*2/players.size() * i));
		}
	}

	public static void start()
	{
		if(Game.started){
			activePlayer = pi.setFirstPlayer();
			turnStart();
		}
	}

	public static void turnStart()
	{
		pi.setNextPlayer();
		fireNextTurnStage();
	}
	
	public static void fireNextTurnStage(){
		if(!activeEventList.fireEvents()){
			if(eventListsIterator.hasNext()){
				activeEventList = eventListsIterator.next();
			} else if(!winTest.test()){
				eventListsIterator = eventLists.iterator();
				turnStart();
			} else{
				(new WinningSend(Game.players.get(0))).preExecute();
			}
		}
	}
	
	
//
//	public void givenRoll(int rollNum)
//	{
//		dontTellActive("hasRolled~" + activePlayer.num + "~" + rollNum + "~");
//		activePlayer.send("whereMove~" + rollNum + "~");
//	}
//
//	public void givenDirection(int nextSpaceNum, int rollNum)
//	{
//		List<Integer> path = new LinkedList<Integer>();
//		Space prevSpace = activePlayer.space;
//		activePlayer.space = activePlayer.space.nbs.get(nextSpaceNum);
//		path.add(activePlayer.space.id);
//		rollNum--;
//		while(rollNum > 0)
//		{
//			if(activePlayer.space.nbs.size() == 2)
//			{
//				for(Integer i : activePlayer.space.nbs.keySet())
//				{
//					if(prevSpace.id != i)
//					{
//						prevSpace = activePlayer.space;
//						activePlayer.space = activePlayer.space.nbs.get(i);
//						path.add(activePlayer.space.id);
//						rollNum--;
//						break;
//					}
//				}
//			}
//			else
//			{
//				break;
//			}
//		}
//		String pathString = "";
//		for(int i = 0; i < path.size(); i++)
//		{
//			pathString += "+" + path.get(i);
//		}
//		GameSocket.broadcast("moveTo~" + activePlayer.num + "~" + rollNum + "~" + pathString.substring(1) + "~");
//	}
//
//	public void doneMoving(int rollNum)
//	{
//		if(rollNum > 0 && activePlayer.space.nbs.size() != 2)
//		{
//			dontTellActive("hasRolled~" + activePlayer.num + "~" + rollNum + "~");
// 			activePlayer.send("whereMove~" + rollNum + "~");
//		}
//		else
//		{
//			boolean onSameSpace;
//			do
//			{
//				onSameSpace = false;
//				for(int i = 0; i < players.size(); i++)
//				{
//					if(activePlayer.space == players.get(i).space && activePlayer != players.get(i))
//					{
//						int tempId = activePlayer.space.nbs.keySet().iterator().next();
//						activePlayer.space = board.get(tempId);
//						// should put same space fight in here
//						activePlayer.send("moveTo~" + activePlayer.num + "~" + 1 + "~" + tempId + "~");
//						onSameSpace = true;
//					}
//				}
//			}
//			while(onSameSpace);
//			activePlayer.space.react(activePlayer);
//		}
//	}


	public void tellEveryoneElse(int num, String str)
	{
		for(int i = 0; i < players.size(); i++)
			if(num != i)
				players.get(i).send(str);
	}

	public static void dontTellActive(String str)
	{
		for(int i = 0; i < players.size(); i++)
			if(activePlayer.num != i)
				players.get(i).send(str);
	}

	public void turnEnd()
	{
		activePlayer = players.get((activePlayer.num + 1) % players.size());
		// needs winning condition
		turnStart();
	}

	public static Space randomSpace()
	{
		return board.get((int)(Math.random() * board.size()));
	}

	public JSONObject getSendString() {
		JSONObject extraInfo = new JSONObject();
		JSONArray boardJSON = new JSONArray();
		JSONArray playersJSON = new JSONArray();
		try{
			for(Space s : Game.board){
				JSONObject spaceJSON = new JSONObject();
				spaceJSON.put("id", s.id);
				spaceJSON.put("x", s.x);
				spaceJSON.put("y", s.y);
				JSONArray nbsJSON = new JSONArray();
//				neighbors
				for(Space nb : s){
					nbsJSON.put(nb.id);
				}
				spaceJSON.put("nbs", nbsJSON);
				boardJSON.put(spaceJSON);
			}
			
			for(Player p : Game.players){
				JSONObject playerJSON = new JSONObject();
				playerJSON.put("name", p.name);
				playerJSON.put("num", p.num);
				playerJSON.put("color", p.color);
				playersJSON.put(playerJSON);
			}
			
			extraInfo.put("board", boardJSON);
			extraInfo.put("board", playersJSON);
		} catch(JSONException e){
			e.printStackTrace();
		}
		return extraInfo;
	}
	
//	public String getSendStr()
//	{
//		sendString = "start~{\"board\":[";
//
//		// adding board spaces
//		for(int i = 0; i < board.size(); i++)
//		{
//			// add basic info
//			sendString += "{\"type\":\"" + board.get(i).type + "\"," + 
//				"\"id\":" + board.get(i).id + "," + 
//				"\"x\":" + board.get(i).x + "," + 
//				"\"y\":" + board.get(i).y + ", \"nbs\":[";
//
//			// add the ids of the neighbors
//			for(Integer k : board.get(i).nbs.keySet())
//			{
//				sendString += k + ",";
//			}
//
//			sendString = sendString.substring(0,sendString.length()-1) + "]},";
//
//		}
//
//		// adding players
//		sendString = sendString.substring(0,sendString.length()-1) + "],\"players\":[";
//
//		for(int i = 0; i < players.size(); i++)
//		{
//			sendString += "{\"name\":\"" + players.get(i).name + "\",\"num\":" + players.get(i).num + ",\"color\":\"" + players.get(i).color + "\",\"space\": " + players.get(i).space.id + " },";
//		}
//		sendString = sendString.substring(0,sendString.length()-1) + "]}";
//
//		return sendString;
//	}
}