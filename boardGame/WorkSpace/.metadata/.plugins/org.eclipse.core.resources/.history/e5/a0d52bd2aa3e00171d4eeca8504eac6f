package game.config;

import java.lang.reflect.InvocationTargetException;
import java.nio.file.Files;
import java.nio.file.Paths;

import javax.websocket.Session;

import org.json.JSONObject;

import game.Game;
import game.SimpleGame;
import game.board.Board;
import game.board.SimpleBoard;
import game.end.WinTest;
import game.player.Player;
import game.player.SimplePlayer;
import game.player.list.PlayerIterator;
import game.space.Space;

public abstract class GameConfig {
	
	public static JSONObject configs = null;
	
	static{
//		not sure if this is the right path
		configs = new JSONObject(new String(Files.readAllBytes(Paths.get("../lib/configs.json")), "UTF-8"));
		
	}
	
	public Game makeNewGame(){
		return new SimpleGame();
	}
	
	public Player makeNewPlayer(Session session){
		return new SimplePlayer(session);
	}
	
	public Board makeNewBoard(){
		return new SimpleBoard();
	}
	
	public static Space makeNewSpace(){
//		return new SimpleSpace();
		try {
			return (Space)Class.forName("").getConstructor().newInstance();
		} catch (InstantiationException | IllegalAccessException | IllegalArgumentException | InvocationTargetException
				| NoSuchMethodException | SecurityException | ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public abstract PlayerIterator makePlayerIterator();

	public abstract WinTest makeWinTest();
}
