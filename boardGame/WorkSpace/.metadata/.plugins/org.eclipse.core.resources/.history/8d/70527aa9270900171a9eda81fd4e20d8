package game.board;

import java.util.HashMap;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import game.leftbehind.space.SpaceType;
import game.space.Space;

public abstract class Board {

	// contains all of the spaces in the game
	protected HashMap<Integer, Space> board = new HashMap<Integer, Space>();
	
	public Board(){
		if(board.isEmpty()){
			makeBoard();
		}
	}
	
	public int size(){
		return board.size();
	}
	
	public void add(Space s){
		board.put(s.id, s);
	}
	
	public Space get(int i){
		return board.get(i);
	}
	
	public abstract Space makeNewSpace(int id, SpaceType typ, HashMap<Integer, Space> n);
	
	public abstract Space makeNewSpace(SpaceType typ, HashMap<Integer, Space> n);

	public abstract Space makeNewSpace(SpaceType typ);

	public abstract Space makeNewSpace(int x, int y);
	
	public abstract Space makeNewSpace();
	
	
	protected abstract void makeBoard();
	
	protected void makeBoardFromJSON(String json){
		JSONArray boardJSON = null;
		try {
			boardJSON = new JSONArray(json);
		} catch (JSONException e) {
			e.printStackTrace();
		}
		boolean running = true;
		int i = 0;
		while(running){
			try {
				JSONObject spaceJSON = (JSONObject)boardJSON.get(i);
				board.put(spaceJSON.get("id"),
					makeNewSpace);
			} catch (JSONException e) {
				running = false;
			}
		}
	}
	
}
