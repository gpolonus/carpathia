package game.config;

import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.nio.file.Files;
import java.nio.file.Paths;

import javax.websocket.Session;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import game.Game;
import game.board.Board;
import game.end.WinTest;
import game.player.Player;
import game.player.list.PlayerIterator;
import game.space.Space;
import util.JsonArray;

public class GameConfig {
	
	private static JsonObject configs = null;
	
	public GameConfig(){
//		not sure if this is the right path
		try {
			configs = new JSONObject(new String(Files.readAllBytes(Paths.get("../lib/configs.json")), "UTF-8"));
		} catch (JSONException | IOException e) {
			e.printStackTrace();
		}
	}
	
	public Game makeNewGame() throws Exception{
		String type;
		try {
			type = (String)configs.get("gameType");
		} catch (JSONException e) {
			e.printStackTrace();
			throw new Exception("JSON configs failed to parse! PlayerIterator type could not be found!");
		}
		return (Game)getConfiguredType(type);
	}
	
	public Player makeNewPlayer(Session session) throws Exception{
		String type;
		try {
			type = (String)configs.get("playerType");
		} catch (JSONException e) {
			e.printStackTrace();
			throw new Exception("JSON configs failed to parse! PlayerIterator type could not be found!");
		}
		return (Player)getConfiguredType(type);
	}
	
	public static Board makeNewBoard() throws Exception{
		String type;
		try {
			type = (String)configs.get("boardType");
		} catch (JSONException e) {
			e.printStackTrace();
			throw new Exception("JSON configs failed to parse! Board type could not be found!");
		}
		return (Board)getConfiguredType(type);
	}
	
	public static Space makeNewSpace() throws Exception{
		String type;
		try {
			type = (String)configs.get("spaceType");
		} catch (JSONException e) {
			e.printStackTrace();
			throw new Exception("JSON configs failed to parse! Space type could not be found!");
		}
		return (Space)getConfiguredType(type);
	}

	public static PlayerIterator makePlayerIterator() throws Exception{
		String type;
		try {
			type = (String)configs.get("PlayerIteratorType");
		} catch (JSONException e) {
			e.printStackTrace();
			throw new Exception("JSON configs failed to parse! PlayerIterator type could not be found!");
		}
		return (PlayerIterator)getConfiguredType(type);
	}

	public static WinTest makeWinTest() throws Exception{
		String type;
		try {
			type = (String)configs.get("winTestType");
		} catch (JSONException e) {
			e.printStackTrace();
			throw new Exception("JSON configs failed to parse! WinTest type could not be found!");
		}
		return (WinTest)getConfiguredType(type);
	}
	
	public static Object getConfiguredType(String type) throws Exception{
		try {
			return (Game)Class.forName(type).getConstructor().newInstance();
		} catch (InstantiationException | IllegalAccessException | IllegalArgumentException | InvocationTargetException
				| NoSuchMethodException | SecurityException | ClassNotFoundException e) {
			e.printStackTrace();
			throw new Exception("Game type: " + type + " could not be used to make a new game");
		}
	}
	
	public void makeEvents() throws JSONException{
		JSONArray eventsJSON = (JSONArray)configs.get("events");
		JsonArray eventsIterator = new JsonArray(eventsJSON);
		for(Object event : eventsIterator){
			JSONObject eventJSON = (JSONObject) event;
			
		}
	}
}
